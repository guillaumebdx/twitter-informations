<?php

namespace App\Command;

use App\Entity\ExecutionLog;
use App\Service\RssFetcher;
use App\Service\LLM\RssSummarizer;
use App\Service\TwitterClient;
use Doctrine\ORM\EntityManagerInterface;
use Symfony\Component\Console\Attribute\AsCommand;
use Symfony\Component\Console\Command\Command;
use Symfony\Component\Console\Input\InputInterface;
use Symfony\Component\Console\Output\OutputInterface;
use Symfony\Component\Console\Style\SymfonyStyle;

#[AsCommand(
    name: 'app:publish-tweet',
    description: 'R√©cup√®re les flux RSS, g√©n√®re une info avec LLM, publie un tweet et persiste en base'
)]
class PublishTweetCommand extends Command
{
    public function __construct(
        private RssFetcher $rssFetcher,
        private RssSummarizer $rssSummarizer,
        private TwitterClient $twitterClient,
        private EntityManagerInterface $entityManager
    ) {
        parent::__construct();
    }

    protected function execute(InputInterface $input, OutputInterface $output): int
    {
        $io = new SymfonyStyle($input, $output);

        $io->title('üê¶ Publication automatique de tweet');

        // Cr√©er le log d'ex√©cution
        $executionLog = new ExecutionLog();
        $info = null;

        try {
            // √âtape 1: R√©cup√©ration des flux RSS
            $io->section('üì° R√©cup√©ration des flux RSS');
            $io->text('R√©cup√©ration de 2 flux al√©atoires pour traitement LLM...');
            
            $results = $this->rssFetcher->fetchRandomFeeds(2);
            $successCount = count($results['success']);
            
            if ($successCount === 0) {
                $io->error('‚ùå Aucun flux RSS n\'a pu √™tre r√©cup√©r√©.');
                return Command::FAILURE;
            }
            
            $io->success(sprintf('‚úÖ %d flux RSS r√©cup√©r√©s avec succ√®s !', $successCount));

            // √âtape 2: Traitement avec LLM
            $io->section('ü§ñ G√©n√©ration du contenu avec OpenAI');
            
            $info = $this->rssSummarizer->processFeeds($results);
            
            if (!$info) {
                $io->error('‚ùå Impossible de cr√©er une information √† partir des flux.');
                $executionLog->setStatus('fail');
                $executionLog->setErrorOutput('Impossible de cr√©er une information √† partir des flux RSS');
                $this->entityManager->persist($executionLog);
                $this->entityManager->flush();
                return Command::FAILURE;
            }
            
            $io->success('‚úÖ Information g√©n√©r√©e avec succ√®s !');
            $io->definitionList(
                ['Description' => substr($info->getDescription(), 0, 100) . '...'],
                ['URL' => $info->getUrl() ?: 'Non d√©finie'],
                ['Image' => $info->getImageUrl() ?: 'Non d√©finie']
            );

            // √âtape 3: Publication du tweet
            $io->section('üê¶ Publication du tweet');
            $io->text('Publication du tweet avec la description g√©n√©r√©e...');
            
            $tweetText = $info->getDescription();
            
            // V√©rifier la longueur du tweet (limite Twitter: 280 caract√®res)
            if (strlen($tweetText) > 280) {
                $tweetText = substr($tweetText, 0, 277) . '...';
                $io->note('Tweet tronqu√© √† 280 caract√®res.');
            }
            
            $tweetResult = $this->twitterClient->postTweet($tweetText);
            
            $io->success('‚úÖ Tweet publi√© avec succ√®s !');
            
            if (isset($tweetResult['data'])) {
                $tweet = $tweetResult['data'];
                $io->definitionList(
                    ['ID du tweet' => $tweet['id'] ?? 'N/A'],
                    ['Texte' => $tweet['text'] ?? 'N/A']
                );
            }

            // √âtape 4: Mise √† jour de published_at et persistance
            $io->section('üíæ Sauvegarde en base de donn√©es');
            
            $info->setPublishedAt(new \DateTimeImmutable());
            $this->entityManager->persist($info);
            
            // Log de succ√®s
            $executionLog->setStatus('success');
            $executionLog->setInfo($info);
            $this->entityManager->persist($executionLog);
            
            $this->entityManager->flush();
            
            $io->success('‚úÖ Information sauvegard√©e en base avec published_at mis √† jour !');
            $io->definitionList(
                ['ID' => $info->getId()],
                ['Publi√© le' => $info->getPublishedAt()->format('d/m/Y H:i:s')],
                ['Cr√©√© le' => $info->getCreatedAt()->format('d/m/Y H:i:s')]
            );

            $io->success('üéâ Publication automatique termin√©e avec succ√®s !');
            
            return Command::SUCCESS;

        } catch (\Exception $e) {
            $io->error('‚ùå Erreur lors de la publication : ' . $e->getMessage());
            
            // Log de l'erreur
            $executionLog->setStatus('fail');
            $executionLog->setErrorOutput($e->getMessage());
            if ($info) {
                $executionLog->setInfo($info);
            }
            $this->entityManager->persist($executionLog);
            $this->entityManager->flush();
            
            $io->section('üîß V√©rifications √† effectuer');
            $io->listing([
                'V√©rifiez que les flux RSS sont configur√©s et accessibles',
                'V√©rifiez que OPENAI_API_KEY est correctement d√©fini',
                'V√©rifiez que les cl√©s Twitter OAuth 1.0a sont correctement d√©finies',
                'V√©rifiez votre connexion internet',
                'V√©rifiez que la base de donn√©es est accessible'
            ]);

            return Command::FAILURE;
        }
    }
}
