<?php

namespace App\Service\LLM;

use App\Entity\Info;
use App\Repository\InfoRepository;
use Doctrine\ORM\EntityManagerInterface;
use Symfony\Contracts\HttpClient\HttpClientInterface;
use Symfony\Contracts\HttpClient\Exception\TransportExceptionInterface;

class RssSummarizer
{
    public function __construct(
        private HttpClientInterface $httpClient,
        private EntityManagerInterface $entityManager,
        private InfoRepository $infoRepository,
        private string $openaiApiKey
    ) {
    }

    /**
     * Process RSS feeds with OpenAI to select and create the most interesting Info
     * 
     * @param array $feedResults Results from RssFetcher::fetchAllFeeds()
     * @return Info|null The created Info entity or null if failed
     */
    public function processFeeds(array $feedResults): ?Info
    {
        if (empty($feedResults['success'])) {
            return null;
        }

        // Prepare content for OpenAI including latest infos for duplicate detection
        $feedContent = $this->prepareFeedContent($feedResults['success']);
        
        if (empty($feedContent)) {
            return null;
        }

        // Log content size for debugging
        $contentSize = strlen($feedContent);
        error_log("RssSummarizer: Taille du contenu pr√©par√©: {$contentSize} caract√®res");

        try {
            // Call OpenAI API
            $response = $this->callOpenAI($feedContent);
            
            // G√©rer le cas o√π OpenAI retourne null (aucune info nouvelle)
            if (!$response) {
                error_log("RssSummarizer: Aucune info nouvelle trouv√©e par le LLM");
                return null;
            }

            // Log de l'URL fournie par le LLM (on fait confiance au LLM pour extraire du XML)
            if (isset($response['url']) && !empty($response['url'])) {
                error_log('RssSummarizer: URL extraite par le LLM du XML RSS: ' . $response['url']);
            } else {
                error_log('RssSummarizer: Aucune URL fournie par le LLM');
            }

            // V√©rification de doublon supprim√©e - on laisse le LLM et les flux RSS g√©rer la nouveaut√©

            // Create and persist Info entity
            $info = $this->createInfoFromResponse($response);
            if (!$info) {
                throw new \Exception("Impossible de cr√©er l'entit√© Info √† partir de la r√©ponse OpenAI");
            }

            $this->entityManager->persist($info);
            $this->entityManager->flush();

            return $info;
            
        } catch (\Exception $e) {
            throw new \RuntimeException('Erreur lors du traitement OpenAI: ' . $e->getMessage(), 0, $e);
        }
    }

    /**
     * Prepare feed content for OpenAI processing
     */
    private function prepareFeedContent(array $successFeeds): string
    {
        $content = "Voici plusieurs flux RSS r√©cup√©r√©s. Analyse-les et s√©lectionne l'information la plus int√©ressante:\n\n";
        
        // Suppression compl√®te de la v√©rification des doublons
        
        $content .= "=== NOUVEAUX FLUX RSS √Ä ANALYSER ===\n\n";
        $content .= "IMPORTANT: Choisissez une URL parmi celles-ci pour √©viter les hallucinations d'URL:\n\n";

        foreach ($successFeeds as $index => $feedData) {
            $flux = $feedData['flux'];
            $xmlContent = $feedData['content'];
            
            $fluxName = $this->sanitizeUtf8((string) $flux->getName());
            $fluxUrl = $this->sanitizeUtf8((string) $flux->getUrl());
            $content .= "=== FLUX " . ($index + 1) . ": {$fluxName} ===\n";
            $content .= "Source: {$fluxUrl}\n";
            $content .= "Contenu RSS brut (extrait les infos et URLs toi-m√™me):\n";
            $content .= "```xml\n";
            
            // Donner le XML brut mais limit√© pour √©viter la surcharge
            $cleanXml = $this->sanitizeUtf8($xmlContent);
            // Limiter la taille du XML pour √©viter les erreurs de tokens
            if (strlen($cleanXml) > 3000) {
                $cleanXml = substr($cleanXml, 0, 3000) . "\n... [XML tronqu√©] ...";
            }
            $content .= $cleanXml . "\n";
            $content .= "```\n\n";
        }

        $content .= "üîç INSTRUCTIONS D'EXTRACTION :\n";
        $content .= "- Cherche les balises <item> ou <entry> dans le XML\n";
        $content .= "- Pour chaque article, trouve : <title>, <description> (ou <summary>), <link> (ou <url>)\n";
        $content .= "- Utilise l'URL EXACTE trouv√©e dans le XML, ne l'invente pas\n\n";

        return $content;
    }



    /**
     * Call OpenAI API to analyze feeds
     */
    private function callOpenAI(string $content): ?array
    {
        // Sanitize content before using in JSON payload
        $content = $this->sanitizeUtf8($content);
        $prompt = $content . "\n\n" . 
            "üéØ MISSION : Tu es un expert en analyse de flux RSS et √©diteur Twitter.\n\n" .
            "üìã PROCESSUS SIMPLE :\n" .
            "1. ANALYSE le XML RSS brut ci-dessus pour identifier les articles\n" .
            "2. CHOISIS l'article le plus int√©ressant et r√©cent\n" .
            "3. EXTRAIS son titre, description ET son URL directement du XML\n" .
            "4. REFORMULE le contenu en style √©ditorial percutant avec emojis\n" .
            "5. UTILISE l'URL exacte que tu as trouv√©e dans le XML\n\n" .
            "üö´ R√àGLES IMPORTANTES :\n" .
            "- N'invente RIEN, utilise uniquement ce qui est dans le XML RSS\n" .
            "- L'URL doit venir directement des balises <link>, <url> ou <guid> du XML\n" .
            "- Choisis toujours l'info la plus r√©cente et int√©ressante\n\n" .
            "üîÑ FORMAT DE R√âPONSE (JSON uniquement) :\n" .
            "{\n" .
            "  \"description\": \"üö® URGENT : La France annonce de nouvelles mesures √©conomiques ! üí∞‚ö°\",\n" .
            "  \"url\": \"https://www.rfi.fr/en/france/20250919-france-announces-new-economic-measures\"\n" .
            "}\n\n" .
            "‚ö†Ô∏è ATTENTION: L'URL ci-dessus est un EXEMPLE. Tu dois utiliser l'URL R√âELLE trouv√©e dans le XML RSS !\n\n" .
            "OU si aucune info nouvelle/diff√©rente, r√©ponds exactement :\n" .
            "{\"skip\": true}\n\n" .
            "üìù R√àGLES IMPORTANTES :\n" .
            "- R√©ponds UNIQUEMENT en JSON, aucun autre texte\n" .
            "- N'ajoute aucun commentaire ou explication\n" .
            "- Assure-toi que le JSON est valide\n" .
            "- RAPPEL: N'invente JAMAIS d'information, choisis parmi les articles RSS list√©s\n" .
            "- \"description\": Texte accrocheur de 240 caract√®res max avec emojis d'alerte\n" .
            "- \"url\": OBLIGATOIRE - Copie l'URL compl√®te trouv√©e dans une balise <link> du XML\n\n" .
            "üí° EXEMPLES DE STYLES VARI√âS (change √† chaque fois) :\n" .
            "Style 1: \"‚ö° BREAKING : [Sujet] bouleverse le march√© ! [D√©tail choc]\"\n" .
            "Style 2: \"üí• SCOOP EXCLUSIF : [Entreprise] r√©v√®le [Innovation surprenante]\"\n" .
            "Style 3: \"üåü R√âV√âLATION : [Personnalit√©] annonce [Changement majeur]\"\n" .
            "Style 4: \"üîî FLASH INFO : [Secteur] en √©bullition apr√®s [√âv√©nement]\"\n" .
            "Style 5: \"üí´ BOOM TECH : [Startup] l√®ve [Montant] pour [Mission folle]\"\n" .
            "Style 6: \"‚≠ê URGENT : [G√©ant tech] rach√®te [Concurrent] pour [Somme]\"\n" .
            "Style 7: \"üéØ EXCLUSIF : [Leader] quitte [Entreprise] pour [Nouveau projet]\"\n" .
            "Style 8: \"üì¢ ALERTE CRYPTO : [Monnaie] explose de [%] apr√®s [Annonce]\"\n\n" .
            "üéØ Choisis l'info qui fera le BUZZ, utilise un style DIFF√âRENT des infos d√©j√† publi√©es !";

        // V√©rifier la longueur du prompt (limite plus √©lev√©e pour gpt-4o-mini)
        $promptLength = strlen($prompt);
        $maxLength = ($_ENV['OPENAI_MODEL'] === 'gpt-4o-mini') ? 25000 : 15000;
        
        if ($promptLength > $maxLength) {
            throw new \Exception("Le contenu est trop volumineux pour OpenAI ({$promptLength} caract√®res). Limite: {$maxLength}. R√©duisez le nombre de flux ou leur taille.");
        }

        // V√©rifier que la cl√© API est d√©finie
        if (empty($this->openaiApiKey)) {
            throw new \Exception('La cl√© API OpenAI (OPENAI_API_KEY) n\'est pas configur√©e.');
        }

        error_log('OpenAI Request - Model: ' . ($_ENV['OPENAI_MODEL'] ?? 'gpt-3.5-turbo'));
        error_log('OpenAI Request - Prompt length: ' . strlen($prompt) . ' chars');
        
        try {
            $response = $this->httpClient->request('POST', 'https://api.openai.com/v1/chat/completions', [
                'headers' => [
                    'Authorization' => 'Bearer ' . $this->openaiApiKey,
                    'Content-Type' => 'application/json',
                ],
                'json' => [
                    'model' => $_ENV['OPENAI_MODEL'] ?? 'gpt-3.5-turbo',
                    'messages' => [
                        [
                            'role' => 'system',
                            'content' => $this->sanitizeUtf8('Tu es un √©diteur cr√©atif et original. Tu dois TOUJOURS r√©diger en FRAN√áAIS. Tu dois VARIER tes styles et emojis. Ne copie JAMAIS les patterns des exemples pr√©c√©dents. Sois cr√©atif et original dans tes formulations. Utilise diff√©rents emojis d\'alerte : üö®, ‚ö°, üî•, üí°, ‚≠ê, üéØ, üí•, üåü, ‚ö†Ô∏è, üì¢, üîî, üí´. Varie les mots d\'accroche : ALERTE, BREAKING, SCOOP, FLASH, URGENT, BOOM, R√âV√âLATION, etc. IMPORTANT: R√©ponds EXCLUSIVEMENT en fran√ßais, m√™me si les sources sont en anglais.')
                        ],
                        [
                            'role' => 'user',
                            'content' => $this->sanitizeUtf8($prompt)
                        ]
                    ],
                    'max_tokens' => ($_ENV['OPENAI_MODEL'] === 'gpt-4o-mini') ? 500 : 300,
                    'temperature' => ($_ENV['OPENAI_MODEL'] === 'gpt-4o-mini') ? 0.7 : 0.9
                ],
                'timeout' => 60,
            ]);

            if ($response->getStatusCode() !== 200) {
                $errorBody = '';
                try {
                    $errorBody = $response->getContent(false);
                    error_log('OpenAI API Error - Status: ' . $response->getStatusCode());
                    error_log('OpenAI API Error - Full Body: ' . $errorBody);
                    
                    // Essayer de parser le JSON d'erreur d'OpenAI
                    $errorData = json_decode($errorBody, true);
                    if ($errorData && isset($errorData['error'])) {
                        error_log('OpenAI Error Type: ' . ($errorData['error']['type'] ?? 'unknown'));
                        error_log('OpenAI Error Message: ' . ($errorData['error']['message'] ?? 'unknown'));
                        error_log('OpenAI Error Code: ' . ($errorData['error']['code'] ?? 'unknown'));
                    }
                } catch (\Exception $e) {
                    error_log('Could not parse OpenAI error response: ' . $e->getMessage());
                }
                
                // Cr√©er un message d'erreur d√©taill√© pour l'utilisateur
                $userErrorMessage = 'Erreur API OpenAI (HTTP ' . $response->getStatusCode() . ')';
                if ($errorData && isset($errorData['error']['message'])) {
                    $userErrorMessage .= ': ' . $errorData['error']['message'];
                    if (isset($errorData['error']['type'])) {
                        $userErrorMessage .= ' (Type: ' . $errorData['error']['type'] . ')';
                    }
                } else {
                    $userErrorMessage .= ': ' . $errorBody;
                }
                
                throw new \Exception($userErrorMessage);
            }

            $data = $response->toArray();
            
            if (!isset($data['choices'][0]['message']['content'])) {
                throw new \Exception('R√©ponse OpenAI invalide - Structure: ' . json_encode($data, JSON_PRETTY_PRINT));
            }

            $jsonResponse = trim($data['choices'][0]['message']['content']);
            
            // Suppression du debug
            
            if (empty($jsonResponse)) {
                throw new \Exception('R√©ponse OpenAI vide - Le mod√®le n\'a retourn√© aucun contenu');
            }
            
            $decodedResponse = json_decode($jsonResponse, true);

            if (json_last_error() !== JSON_ERROR_NONE) {
                throw new \Exception('R√©ponse JSON invalide de OpenAI: ' . json_last_error_msg() . ' | Contenu brut: "' . $jsonResponse . '"');
            }

            // G√©rer le cas o√π le LLM indique qu'il faut skip (aucune info nouvelle)
            if ($decodedResponse === null || (isset($decodedResponse['skip']) && $decodedResponse['skip'])) {
                error_log('OpenAI a indiqu√© skip - aucune info nouvelle d√©tect√©e par le mod√®le');
                return null;
            }

            return $decodedResponse;

        } catch (TransportExceptionInterface $e) {
            error_log('OpenAI Transport Error: ' . $e->getMessage());
            error_log('Model used: ' . ($_ENV['OPENAI_MODEL'] ?? 'gpt-3.5-turbo'));
            
            // Essayer de r√©cup√©rer plus de d√©tails sur l'erreur
            if (method_exists($e, 'getResponse')) {
                try {
                    $response = $e->getResponse();
                    if ($response) {
                        $errorBody = $response->getContent(false);
                        error_log('OpenAI Error Response Body: ' . $errorBody);
                    }
                } catch (\Exception $ex) {
                    error_log('Could not get error response body: ' . $ex->getMessage());
                }
            }
            
            // Cr√©er un message d'erreur d√©taill√© avec les infos de la r√©ponse si disponible
            $detailedMessage = 'Erreur de transport OpenAI: ' . $e->getMessage();
            if (method_exists($e, 'getResponse')) {
                try {
                    $response = $e->getResponse();
                    if ($response) {
                        $errorBody = $response->getContent(false);
                        $errorData = json_decode($errorBody, true);
                        if ($errorData && isset($errorData['error']['message'])) {
                            $detailedMessage .= ' | D√©tail: ' . $errorData['error']['message'];
                        }
                    }
                } catch (\Exception $ex) {
                    // Ignore
                }
            }
            throw new \Exception($detailedMessage);
        } catch (\Exception $e) {
            error_log('OpenAI General Error: ' . $e->getMessage());
            error_log('Model used: ' . ($_ENV['OPENAI_MODEL'] ?? 'gpt-3.5-turbo'));
            throw new \Exception('Erreur g√©n√©rale OpenAI: ' . $e->getMessage());
        }
    }

    /**
     * Check if the OpenAI response represents a duplicate of existing Info
     */
    private function isDuplicate(array $response): bool
    {
        // Si l'info a une URL null, on publie quand m√™me
        if (!isset($response['url']) || $response['url'] === null || $response['url'] === '') {
            return false;
        }

        // V√©rification stricte : l'URL s√©lectionn√©e pour le tweet n'est pas d√©j√† en DB
        $isDuplicate = $this->infoRepository->existsByUrl($response['url']);
        if ($isDuplicate) {
            error_log('RssSummarizer: Doublon d√©tect√© pour URL: ' . $response['url']);
        }
        return $isDuplicate;
    }

    /**
     * Map article ID to corresponding URL from RSS feeds
     */
    private function mapArticleIdToUrl(string $articleId, array $successFeeds): ?string
    {
        // Parse articleId format: FLUX1_ART2 -> flux index 1, article index 2
        if (!preg_match('/^FLUX(\d+)_ART(\d+)$/', $articleId, $matches)) {
            return null;
        }

        $fluxIndex = (int)$matches[1] - 1; // Convert to 0-based index
        $articleIndex = (int)$matches[2] - 1; // Convert to 0-based index

        if (!isset($successFeeds[$fluxIndex])) {
            return null;
        }

        $feedData = $successFeeds[$fluxIndex];
        $xmlContent = $feedData['content'];

        try {
            $items = $this->parseRssAndGetLatestItems($xmlContent, 2);
            if (isset($items[$articleIndex]) && !empty($items[$articleIndex]['link'])) {
                return $items[$articleIndex]['link'];
            }
        } catch (\Throwable $e) {
            error_log('RssSummarizer: Erreur lors du mapping article ID: ' . $e->getMessage());
        }

        return null;
    }

    /**
     * Create Info entity from OpenAI response
     */
    private function createInfoFromResponse(array $response): ?Info
    {
        // Description is mandatory; URL is optional (avoid LLM-invented links)
        if (!isset($response['description'])) {
            return null;
        }

        $info = new Info();
        $info->setDescription($response['description']);
        // Sanitize and bound main URL to 255 chars
        if (isset($response['url']) && !empty($response['url'])) {
            $safeUrl = $this->sanitizeAndClampUrl((string)$response['url'], 255);
            if ($safeUrl !== null) {
                $info->setUrl($safeUrl);
            }
        }
        

        // publishedAt n'est plus utilis√© - createdAt sera automatiquement d√©fini par le lifecycle callback

        return $info;
    }

    /**
     * Ensure URL is valid and <= maxLen. If too long, try removing query/fragment. Return null if still invalid/too long.
     */
    private function sanitizeAndClampUrl(string $url, int $maxLen = 255): ?string
    {
        $url = trim($this->sanitizeUtf8($url));
        if ($url === '' || !filter_var($url, FILTER_VALIDATE_URL)) {
            return null;
        }
        if (strlen($url) <= $maxLen) {
            return $url;
        }
        // Try to strip query and fragment to shorten
        $parts = @parse_url($url);
        if ($parts === false || empty($parts['scheme']) || empty($parts['host'])) {
            return null;
        }
        $rebuilt = $parts['scheme'] . '://' . $parts['host'] . (isset($parts['port']) ? ':' . $parts['port'] : '') . ($parts['path'] ?? '');
        if (strlen($rebuilt) <= $maxLen && filter_var($rebuilt, FILTER_VALIDATE_URL)) {
            return $rebuilt;
        }
        // Still too long
        return null;
    }

    /**
     * Collect normalized candidate links from RSS items used in the prompt
     */
    private function collectCandidateLinks(array $successFeeds): array
    {
        $links = [];
        foreach ($successFeeds as $feedData) {
            $xmlContent = $feedData['content'];
            try {
                $items = $this->parseRssAndGetLatestItems($xmlContent, 2);
                foreach ($items as $item) {
                    if (!empty($item['link'])) {
                        $url = trim((string)$item['link']);
                        if ($url !== '') {
                            // Plus permissif: accepter les URLs absolues ET relatives qui ressemblent √† des URLs
                            $isAbsoluteUrl = filter_var($url, FILTER_VALIDATE_URL);
                            $looksLikeUrl = (str_starts_with($url, '/') && strlen($url) > 1) || 
                                           str_contains($url, '.') || 
                                           str_starts_with($url, 'http');
                            if ($isAbsoluteUrl || $looksLikeUrl) {
                                $links[] = rtrim($url, "/ ");
                            }
                        }
                    }
                }
            } catch (\Throwable $t) {
                // ignore
            }
        }
        // Unique values
        return array_values(array_unique($links));
    }

    /**
     * Sanitize a string to valid UTF-8, removing invalid bytes and control chars.
     */
    private function sanitizeUtf8(?string $text): string
    {
        if ($text === null || $text === '') {
            return '';
        }

        // Remove problematic control characters first
        $text = preg_replace('/[\x00-\x08\x0B\x0C\x0E-\x1F\x7F]/u', '', $text);

        // Ensure string is valid UTF-8
        if (!mb_detect_encoding($text, 'UTF-8', true)) {
            $converted = @iconv('UTF-8', 'UTF-8//IGNORE', $text);
            if ($converted !== false) {
                $text = $converted;
            } else {
                // Fallback: try utf8_encode which assumes ISO-8859-1 input
                $text = @utf8_encode($text);
            }
        }

        // Normalize if intl is available
        if (class_exists('Normalizer')) {
            $text = \Normalizer::normalize($text, \Normalizer::FORM_C);
        }

        return $text;
    }
}
