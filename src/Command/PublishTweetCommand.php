<?php

namespace App\Command;

use App\Entity\ExecutionLog;
use App\Service\RssFetcher;
use App\Service\LLM\RssSummarizer;
use App\Service\TwitterClient;
use Doctrine\ORM\EntityManagerInterface;
use Symfony\Component\Console\Attribute\AsCommand;
use Symfony\Component\Console\Command\Command;
use Symfony\Component\Console\Input\InputInterface;
use Symfony\Component\Console\Input\InputOption;
use Symfony\Component\Console\Output\OutputInterface;
use Symfony\Component\Console\Style\SymfonyStyle;

#[AsCommand(
    name: 'app:publish-tweet',
    description: 'R√©cup√®re les flux RSS, g√©n√®re une info avec LLM, publie un tweet et persiste en base'
)]
class PublishTweetCommand extends Command
{
    public function __construct(
        private RssFetcher $rssFetcher,
        private RssSummarizer $rssSummarizer,
        private TwitterClient $twitterClient,
        private EntityManagerInterface $entityManager
    ) {
        parent::__construct();
    }

    protected function configure(): void
    {
        $this->addOption(
            'feeds',
            'f',
            InputOption::VALUE_OPTIONAL,
            'Nombre de flux RSS √† traiter (1-4, d√©faut: 3 pour gpt-4o-mini, 2 pour gpt-3.5-turbo)',
            2
        );

        $this->addOption(
            'dry-run',
            'd',
            InputOption::VALUE_NONE,
            'Mode test: ex√©cute tout le processus (validation et upload image) sans publier le tweet'
        );
    }

    protected function execute(InputInterface $input, OutputInterface $output): int
    {
        $io = new SymfonyStyle($input, $output);

        $io->title('üê¶ Publication automatique de tweet');

        // Cr√©er le log d'ex√©cution
        $executionLog = new ExecutionLog();
        $info = null;

        try {
            // √âtape 1: R√©cup√©ration des flux RSS
            $io->section('üì° R√©cup√©ration des flux RSS');
            $feedsCount = (int) $input->getOption('feeds');
            
            // D√©finir le d√©faut selon le mod√®le OpenAI
            if ($feedsCount === 0) {
                $feedsCount = ($_ENV['OPENAI_MODEL'] === 'gpt-4o-mini') ? 3 : 2;
            }
            
            // Valider le nombre de flux (limite plus √©lev√©e pour gpt-4o-mini)
            $maxFeeds = ($_ENV['OPENAI_MODEL'] === 'gpt-4o-mini') ? 4 : 2;
            if ($feedsCount < 1 || $feedsCount > $maxFeeds) {
                $feedsCount = ($_ENV['OPENAI_MODEL'] === 'gpt-4o-mini') ? 3 : 2;
            }
            
            $io->text("R√©cup√©ration de {$feedsCount} flux al√©atoire(s) pour traitement LLM...");
            
            $results = $this->rssFetcher->fetchRandomFeeds($feedsCount);
            $successCount = count($results['success']);
            
            if ($successCount === 0) {
                $io->error('‚ùå Aucun flux RSS n\'a pu √™tre r√©cup√©r√©.');
                return Command::FAILURE;
            }
            
            $io->success(sprintf('‚úÖ %d flux RSS r√©cup√©r√©s avec succ√®s !', $successCount));

            // √âtape 2: Traitement avec LLM
            $io->section('ü§ñ G√©n√©ration du contenu avec OpenAI');
            
            $info = $this->rssSummarizer->processFeeds($results);
            
            if (!$info) {
                $io->warning('‚ö†Ô∏è Aucune information nouvelle trouv√©e dans les flux RSS.');
                $io->text('Le LLM a d√©termin√© que toutes les informations sont des doublons ou non pertinentes.');
                $executionLog->setStatus('success');
                $executionLog->setErrorOutput('Aucune info nouvelle - tous les articles sont des doublons ou non pertinents');
                $this->entityManager->persist($executionLog);
                $this->entityManager->flush();
                return Command::SUCCESS;
            }
            
            $io->success('‚úÖ Information g√©n√©r√©e avec succ√®s !');
            $io->definitionList(
                ['Description' => substr($info->getDescription(), 0, 100) . '...'],
                ['URL' => $info->getUrl() ?: 'Non d√©finie']
            );

            // √âtape 3: Publication du tweet
            $io->section('üê¶ Publication du tweet');
            $io->text('Pr√©paration du contenu du tweet...');

            $tweetText = $info->getDescription();
            
            // Ajouter l'URL √† la fin du tweet si elle existe
            if ($info->getUrl()) {
                $tweetText .= ' ' . $info->getUrl();
            }

            // Calculer la longueur r√©elle du tweet (Twitter raccourcit les URLs en t.co = 23 chars)
            $realTweetLength = strlen($tweetText);
            if ($info->getUrl()) {
                // Soustraire la longueur de l'URL originale et ajouter 23 chars pour t.co + 1 espace
                $realTweetLength = $realTweetLength - strlen($info->getUrl()) + 24;
            }
            
            // V√©rifier la longueur r√©elle du tweet (limite Twitter: 280 caract√®res)
            if ($realTweetLength > 280) {
                $maxDescLength = 280 - 24; // 24 = 23 (t.co) + 1 (espace)
                if ($info->getUrl()) {
                    $description = $info->getDescription();
                    $tweetText = substr($description, 0, $maxDescLength - 3) . '... ' . $info->getUrl();
                } else {
                    $tweetText = substr($tweetText, 0, 277) . '...';
                }
                $io->note('Tweet tronqu√© pour respecter la limite de 280 caract√®res (URLs comptent comme 23 chars).');
            }
            
            // Afficher le contenu du tweet qui sera publi√©
            $io->section('üìù Contenu du tweet');
            $io->text('Voici le tweet qui sera publi√© :');
            $io->newLine();
            $io->text('‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê');
            
            // D√©couper le tweet en lignes de 77 caract√®res max pour l'affichage
            $lines = str_split($tweetText, 77);
            foreach ($lines as $line) {
                $io->text('‚îÇ ' . str_pad($line, 77) . ' ‚îÇ');
            }
            
            $io->text('‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò');
            $io->newLine();
            
            // Afficher la longueur r√©elle (avec t.co)
            $displayLength = strlen($tweetText);
            if ($info->getUrl()) {
                $realLength = $displayLength - strlen($info->getUrl()) + 23;
                $io->text('Longueur affich√©e: ' . $displayLength . ' caract√®res');
                $io->text('Longueur r√©elle sur Twitter: ' . $realLength . '/280 caract√®res (URL ‚Üí t.co = 23 chars)');
            } else {
                $io->text('Longueur: ' . $displayLength . '/280 caract√®res');
            }

            $dryRun = (bool) $input->getOption('dry-run');
            if ($dryRun) {
                $io->warning('Mode DRY-RUN activ√©: aucun appel √† l\'API Twitter ne sera effectu√©.');
                // Sauvegarder le log d'ex√©cution comme succ√®s mais sans publication
                $executionLog->setStatus('success');
                $executionLog->setInfo($info);
                $executionLog->setErrorOutput('DRY-RUN: tweet non publi√© (aucun appel API Twitter).');
                $this->entityManager->persist($executionLog);
                $this->entityManager->flush();
                $io->success('‚úÖ DRY-RUN termin√©: aucun tweet publi√©.');
                return Command::SUCCESS;
            }

            // Publication texte seul
            $tweetResult = $this->twitterClient->postTweet($tweetText);
            
            if (!$tweetResult) {
                throw new \RuntimeException('La publication du tweet a √©chou√© sans r√©ponse.');
            }
            $io->success('‚úÖ Tweet publi√© avec succ√®s !');
            
            if (isset($tweetResult['data'])) {
                $tweet = $tweetResult['data'];
                $io->definitionList(
                    ['ID du tweet' => $tweet['id'] ?? 'N/A'],
                    ['Texte' => $tweet['text'] ?? 'N/A']
                );
            }

            // √âtape 4: Mise √† jour de published_at et persistance
            $io->section('üíæ Sauvegarde en base de donn√©es');
            
            $info->setPublishedAt(new \DateTimeImmutable());
            $this->entityManager->persist($info);
            
            // Log de succ√®s
            $executionLog->setStatus('success');
            $executionLog->setInfo($info);
            $this->entityManager->persist($executionLog);
            
            $this->entityManager->flush();
            
            $io->success('‚úÖ Information sauvegard√©e en base avec published_at mis √† jour !');
            $io->definitionList(
                ['ID' => $info->getId()],
                ['Publi√© le' => $info->getPublishedAt()->format('d/m/Y H:i:s')],
                ['Cr√©√© le' => $info->getCreatedAt()->format('d/m/Y H:i:s')]
            );

            $io->success('üéâ Publication automatique termin√©e avec succ√®s !');
            
            return Command::SUCCESS;

        } catch (\Exception $e) {
            $io->error('‚ùå Erreur lors de la publication : ' . $e->getMessage());
            
            // Log de l'erreur
            $executionLog->setStatus('fail');
            $executionLog->setErrorOutput($e->getMessage());
            if ($info) {
                $executionLog->setInfo($info);
            }
            $this->entityManager->persist($executionLog);
            $this->entityManager->flush();
            
            $io->section('üîß V√©rifications √† effectuer');
            $io->listing([
                'V√©rifiez que les flux RSS sont configur√©s et accessibles',
                'V√©rifiez que OPENAI_API_KEY est correctement d√©fini',
                'V√©rifiez que les cl√©s Twitter OAuth 1.0a sont correctement d√©finies',
                'V√©rifiez votre connexion internet',
                'V√©rifiez que la base de donn√©es est accessible'
            ]);

            return Command::FAILURE;
        }
    }
}
